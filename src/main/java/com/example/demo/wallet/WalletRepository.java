package com.example.demo.wallet;

import java.util.Collection;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import jakarta.transaction.Transactional;

public interface WalletRepository extends JpaRepository<Wallet, Integer> { // is a relation;

	// 2 ways to implement SQL logic
	Optional<Wallet> findByEmail(String email);

//	@Query("select w from Wallet w where w.email=?1") // ?1 == One arguement JPQL
	@Query(value = "SELECT * FROM wallet WHERE email = ?1", nativeQuery = true) // native query
	Optional<Wallet> findByEmailaddr(String email);

	@Query("select w from Wallet w where w.email=:email") // named parameters use @Param() for multiple inputs as well
	Optional<Wallet> findByEmailaddress(@Param("email") String email);

	@Query("select w from Wallet w where w.balance between ?1 and ?2")
	Collection<Wallet> findWalletsBetween(Double lowerBalance, Double upperBalance);

	@Modifying
	@Transactional
	@Query("delete from Wallet w where w.id = :id")
	int deleteWalletByID(@Param("id") Integer id);

	@Modifying
	@Transactional
	@Query("Update Wallet w set w.name = :name Where w.email = :email")
	int updateWalletByEmail(@Param("name") String name, @Param("email") String email);

	Collection<Wallet> findByBalanceBetween(Double lowerBalance, Double upperBalance);

	Optional<Wallet> findByEmailAndPassword(String email, String password);
	// The method name follows the Spring Data JPA naming convention. Spring Data
	// JPA will automatically generate the query based on the method name.
	// findByEmail translates to a query that searches for a Wallet entity where the
	// email field matches the provided parameter. Query generated by JPA
}
